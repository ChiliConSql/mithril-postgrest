'use strict';

(function (factory) {
  if (typeof exports === 'object') {
    // Node/CommonJS
    factory(require('mithril'), require('underscore'));
  } else {
    // Browser globals
    factory(window.m, window._);
  }
})(function (m, _) {
  var postgrest = {};

  var token = m.prop(),
      mergeConfig = function mergeConfig(config, options) {
    return options && _.isFunction(options.config) ? _.compose(options.config, config) : config;
  },
      addHeaders = function addHeaders(headers) {
    return function (xhr) {
      _.each(headers, function (value, key) {
        xhr.setRequestHeader(key, value);
      });
      return xhr;
    };
  },
      addRepresentationHeader = addHeaders({ 'Prefer': 'return=representation' });

  postgrest.token = token;

  postgrest.loader = function (options, requestFunction) {
    var defaultState = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var loader = m.prop(defaultState),
        d = m.deferred();
    loader.load = function () {
      loader(true);
      m.redraw();
      m.startComputation();
      requestFunction(_.extend({}, options, { background: true })).then(function (data) {
        loader(false);
        d.resolve(data);
        m.endComputation();
      }, function (error) {
        loader(false);
        d.reject(error);
        m.endComputation();
      });
      return d.promise;
    };
    return loader;
  };

  postgrest.loaderWithToken = function (options, defaultState) {
    return postgrest.loader(options, postgrest.requestWithToken, defaultState);
  };

  postgrest.init = function (apiPrefix, authenticationOptions) {
    postgrest.request = function (options) {
      return m.request(_.extend({}, options, { url: apiPrefix + options.url }));
    };

    postgrest.authenticate = function () {
      var deferred = m.deferred();
      if (token()) {
        deferred.resolve({ token: token() });
      } else {
        m.request(authenticationOptions).then(function (data) {
          token(data.token);
          deferred.resolve({ token: token() });
        }, function (data) {
          deferred.reject(data);
        });
      }
      return deferred.promise;
    };

    postgrest.requestWithToken = function (options) {
      var addAuthorizationHeader = function addAuthorizationHeader() {
        return mergeConfig(addHeaders({ 'Authorization': 'Bearer ' + token() }), options);
      };
      return m.postgrest.authenticate().then(function () {
        return m.postgrest.request(_.extend({}, options, { config: addAuthorizationHeader() }));
      }, function () {
        return m.postgrest.request(_.extend({}, options));
      });
    };

    postgrest.model = function (name) {
      var addPaginationHeaders = function addPaginationHeaders(page, pageSize) {
        if (!pageSize) {
          return;
        }

        var toRange = function toRange() {
          var from = (page - 1) * pageSize,
              to = from + pageSize - 1;
          return from + '-' + to;
        };

        return addHeaders({ 'Range-unit': 'items', 'Range': toRange() });
      },
          pageSize = m.prop(10),
          nameOptions = { url: '/' + name },
          getOptions = function getOptions(data, page, pageSize, options) {
        return _.extend({}, options, nameOptions, { method: 'GET', data: data, config: mergeConfig(addPaginationHeaders(page, pageSize), options) });
      },
          querystring = function querystring(filters, options) {
        options.url += '?' + m.route.buildQueryString(filters);
        return options;
      },
          options = function options(_options) {
        return m.postgrest.request(_.extend({}, _options, nameOptions, { method: 'OPTIONS' }));
      },
          postOptions = function postOptions(attributes, options) {
        return _.extend({}, options, nameOptions, { method: 'POST', data: attributes, config: mergeConfig(addRepresentationHeader, options) });
      },
          deleteOptions = function deleteOptions(filters, options) {
        return querystring(filters, _.extend({}, options, nameOptions, { method: 'DELETE' }));
      },
          patchOptions = function patchOptions(filters, attributes, options) {
        return querystring(filters, _.extend({}, options, nameOptions, { method: 'PATCH', data: attributes, config: mergeConfig(addRepresentationHeader, options) }));
      },
          getPageOptions = function getPageOptions(data, page, options) {
        return getOptions(data, page || 1, pageSize(), options);
      },
          getRowOptions = function getRowOptions(data, options) {
        return getOptions(data, 1, 1, options);
      };

      return {
        pageSize: pageSize,
        getPageOptions: getPageOptions,
        getRowOptions: getRowOptions,
        patchOptions: patchOptions,
        postOptions: postOptions,
        deleteOptions: deleteOptions,
        getPage: _.compose(postgrest.request, getPageOptions),
        getRow: _.compose(postgrest.request, getRowOptions),
        patch: _.compose(postgrest.request, patchOptions),
        post: _.compose(postgrest.request, postOptions),
        deleteRequest: _.compose(postgrest.request, deleteOptions),
        getPageWithToken: _.compose(postgrest.requestWithToken, getPageOptions),
        getRowWithToken: _.compose(postgrest.requestWithToken, getRowOptions),
        patchWithToken: _.compose(postgrest.requestWithToken, patchOptions),
        postWithToken: _.compose(postgrest.requestWithToken, postOptions),
        deleteWithToken: _.compose(postgrest.requestWithToken, deleteOptions),
        options: options
      };
    };

    return postgrest;
  };

  m.postgrest = postgrest;
});
'use strict';

(function (factory) {
  if (typeof exports === 'object') {
    // Node/CommonJS
    factory(require('mithril'), require('underscore'));
  } else {
    // Browser globals
    factory(window.m, window._);
  }
})(function (m, _) {
  m.postgrest.filtersVM = function (attributes) {
    var newVM = {},
        filter = function filter() {
      var prop = m.prop(''),
          filterProp = function filterProp(value) {
        if (arguments.length > 0) {
          prop(value);
          return newVM;
        }
        return prop();
      };
      // Just so we can have a default to_filter and avoid if _.isFunction calls
      filterProp.toFilter = function () {
        return _.isString(filterProp()) ? filterProp().trim() : filterProp();
      };
      return filterProp;
    },
        getters = _.reduce(attributes, function (memo, operator, attr) {
      // The operator between is implemented with two properties, one for greater than value and another for lesser than value.
      // Both properties are sent in the queurystring with the same name,
      // that's why we need the special case here, so we can use a simple map as argument to filtersVM.
      if (operator === 'between') {
        memo[attr] = { lte: filter(), gte: filter() };
      } else {
        memo[attr] = filter();
      }
      return memo;
    }, { order: m.prop() }),
        parametersWithoutOrder = function parametersWithoutOrder() {
      return _.reduce(getters, function (memo, getter, attr) {
        if (attr !== 'order') {
          var operator = attributes[attr];

          if (_.isFunction(getter.toFilter) && (getter.toFilter() === undefined || getter.toFilter() === '')) {
            return memo;
          }

          // Bellow we use different formatting rules for the value depending on the operator
          // These rules are used regardless of the toFilter function,
          // so the user can use a custom toFilter without having to worry with basic filter syntax
          if (operator === 'ilike' || operator === 'like') {
            memo[attr] = operator + '.*' + getter.toFilter() + '*';
          } else if (operator === '@@') {
            memo[attr] = operator + '.' + getter.toFilter().replace(/\s+/g, '&');
          } else if (operator === 'between') {
            if (!getter.lte.toFilter() && !getter.gte.toFilter()) {
              return memo;
            }
            memo[attr] = [];
            if (getter.gte()) {
              memo[attr].push('gte.' + getter.gte.toFilter());
            }
            if (getter.lte()) {
              memo[attr].push('lte.' + getter.lte.toFilter());
            }
          } else {
            memo[attr] = operator + '.' + getter.toFilter();
          }
        }
        return memo;
      }, {});
    },
        parameters = function parameters() {
      // The order parameters have a special syntax (just like an order by SQL clause)
      // https://github.com/begriffs/postgrest/wiki/Routing#filtering-and-ordering
      var order = function order() {
        return getters.order() && _.reduce(getters.order(), function (memo, direction, attr) {
          memo.push(attr + '.' + direction);
          return memo;
        }, []).join(',');
      },
          orderParameter = order() ? { order: order() } : {};

      return _.extend({}, orderParameter, parametersWithoutOrder());
    };

    return _.extend(newVM, getters, { parameters: parameters, parametersWithoutOrder: parametersWithoutOrder });
  };
});
'use strict';

(function (factory) {
  if (typeof exports === 'object') {
    // Node/CommonJS
    factory(require('mithril'), require('underscore'));
  } else {
    // Browser globals
    factory(window.m, window._);
  }
})(function (m, _) {
  m.postgrest.paginationVM = function (pageRequest, order) {
    var collection = m.prop([]),
        defaultOrder = order || 'id.desc',
        filters = m.prop({ order: defaultOrder }),
        isLoading = m.prop(false),
        page = m.prop(1),
        total = m.prop();

    var fetch = function fetch() {
      var d = m.deferred();
      var getTotal = function getTotal(xhr) {
        if (!xhr || xhr.status === 0) {
          return JSON.stringify({ hint: null, details: null, code: 0, message: 'Connection error' });
        }
        var rangeHeader = xhr.getResponseHeader('Content-Range');
        if (_.isString(rangeHeader) && rangeHeader.split('/').length > 1) {
          total(parseInt(rangeHeader.split('/')[1]));
        }
        try {
          JSON.parse(xhr.responseText);
          return xhr.responseText;
        } catch (ex) {
          return JSON.stringify({ hint: null, details: null, code: 0, message: xhr.responseText });
        }
      };
      isLoading(true);
      pageRequest(filters(), page(), { background: true, extract: getTotal }).then(function (data) {
        collection(_.union(collection(), data));
        isLoading(false);
        d.resolve(collection());
        m.redraw();
      }, function (error) {
        isLoading(false);
        total(0);
        d.reject(error);
        m.redraw();
      });
      return d.promise;
    },
        firstPage = function firstPage(parameters) {
      filters(_.extend({ order: defaultOrder }, parameters));
      collection([]);
      page(1);
      return fetch();
    },
        nextPage = function nextPage() {
      page(page() + 1);
      return fetch();
    };

    return {
      collection: collection,
      firstPage: firstPage,
      isLoading: isLoading,
      nextPage: nextPage,
      total: total
    };
  };
});
//# sourceMappingURL=data:application/json;base64,